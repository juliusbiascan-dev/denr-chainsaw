// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  // Chainsaw              Chainsaw[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Equipment {
  id                String   @id @default(cuid())
  brand             String // Chainsaw Brand
  model             String // Chainsaw Model
  serialNumber      String   @unique // Chainsaw Serial Number
  guidBarLength     Float // Guide Bar Length in inches
  horsePower        Float // Horse Power
  fuelType          FuelType // Fuel type (Gas, Diesel, Electric, Other)
  dateAcquired      DateTime // Date of Acquisition
  stencilOfSerialNo String // Stencil of Serial Number
  otherInfo         String // Document/proof of ownership
  intendedUse       UseType // Intended use of chainsaw
  isNew             Boolean // New Chainsaw or renewal of registration
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations could be added here for owner information
  // userId String
  // user   User   @relation(fields: [userId], references: [id])

  // Optional: documents/attachments
  documents Document[]
}

enum FuelType {
  GAS
  DIESEL
  ELECTRIC
  OTHER
}

enum UseType {
  WOOD_PROCESSING
  TREE_CUTTING
  LEGAL_PURPOSES
  OFFICIAL_TREE_CUTTING
  OTHER
}

model Document {
  id          String    @id @default(cuid())
  type        DocType
  fileUrl     String
  uploadedAt  DateTime  @default(now())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
}

enum DocType {
  REGISTRATION_APPLICATION
  OFFICIAL_RECEIPT
  OWNERSHIP_PROOF
  SERIAL_NUMBER_PICTURE
  CHAINSAW_PICTURE
  BUSINESS_PERMIT
  FOR_PERMIT
  BUSINESS_REGISTRATION
  WOOD_PROCESSOR_PERMIT
  GOVT_CERTIFICATION
}
